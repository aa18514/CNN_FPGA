package data; 

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib; 
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector; 
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType; 
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType; 

public class data extends KernelLib{
	public DFEVector<DFEVar> x; 
	public DFEType vec;
	public DFEVar sum; 
	
	public data(KernelLib owner, int size, DFEType T){
		super(owner); 
		x = new DFEVectorType<DFEVar>(T, size).newInstance(this); 
		vec = T;
	} 	

	public void update_data(DFEVector<DFEVar> data, int fifo_size, int image_dimension, int kernel_dimension){ 
		for(int row = 0; row < kernel_dimension; row++){
			for(int col = 0; col < kernel_dimension; col++){
				int address = fifo_size  - col - (image_dimension * row) - 1; 
				x[kernel_dimension * row + col] <== data[address].cast(vec); 
			}
		}
	}
	
	public void zero_pad(int init_point, int final_point){
		for(int i = init_point; i < final_point; i++){
			x[i] <== constant.var(0).cast(vec); 
		}
	}
}
